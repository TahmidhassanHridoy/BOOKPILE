{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.baseUrl = 'http://localhost:6060/api/products';\n    this.categoryUrl = 'http://localhost:6060/api/product-category';\n  }\n  getProduct(theProductId) {\n    // need to build URL based on product id\n    const productUrl = `${this.baseUrl}/${theProductId}`;\n    return this.httpClient.get(productUrl);\n  }\n  getProductListPaginate(thePage, thePageSize, theCategoryId) {\n    // need to build URL based on category id, page and size \n    const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}` + `&page=${thePage}&size=${thePageSize}`;\n    return this.httpClient.get(searchUrl);\n  }\n  getProductList(theCategoryId) {\n    // need to build URL based on category id \n    const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}`;\n    return this.getProducts(searchUrl);\n  }\n  searchProducts(theKeyword) {\n    // need to build URL based on the keyword \n    const searchUrl = `${this.baseUrl}/search/findByNameContaining?name=${theKeyword}`;\n    return this.getProducts(searchUrl);\n  }\n  searchProductsPaginate(thePage, thePageSize, theKeyword) {\n    // need to build URL based on keyword, page and size \n    const searchUrl = `${this.baseUrl}/search/findByNameContaining?name=${theKeyword}` + `&page=${thePage}&size=${thePageSize}`;\n    return this.httpClient.get(searchUrl);\n  }\n  getProducts(searchUrl) {\n    return this.httpClient.get(searchUrl).pipe(map(response => response._embedded.products));\n  }\n  getProductCategories() {\n    return this.httpClient.get(this.categoryUrl).pipe(map(response => response._embedded.productCategory));\n  }\n}\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n};\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,GAAG,QAAQ,gBAAgB;;;AAMpC,OAAM,MAAOC,cAAc;EAMzBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAJtB,YAAO,GAAG,oCAAoC;IAE9C,gBAAW,GAAG,4CAA4C;EAEpB;EAE9CC,UAAU,CAACC,YAAoB;IAE7B;IACA,MAAMC,UAAU,GAAG,GAAG,IAAI,CAACC,OAAO,IAAIF,YAAY,EAAE;IAEpD,OAAO,IAAI,CAACF,UAAU,CAACK,GAAG,CAAUF,UAAU,CAAC;EACjD;EAEAG,sBAAsB,CAACC,OAAe,EACfC,WAAmB,EACnBC,aAAqB;IAE1C;IACA,MAAMC,SAAS,GAAG,GAAG,IAAI,CAACN,OAAO,+BAA+BK,aAAa,EAAE,GAC7D,SAASF,OAAO,SAASC,WAAW,EAAE;IAExD,OAAO,IAAI,CAACR,UAAU,CAACK,GAAG,CAAsBK,SAAS,CAAC;EAC5D;EAGAC,cAAc,CAACF,aAAqB;IAElC;IACA,MAAMC,SAAS,GAAG,GAAG,IAAI,CAACN,OAAO,+BAA+BK,aAAa,EAAE;IAE/E,OAAO,IAAI,CAACG,WAAW,CAACF,SAAS,CAAC;EACpC;EAEAG,cAAc,CAACC,UAAkB;IAE/B;IACA,MAAMJ,SAAS,GAAG,GAAG,IAAI,CAACN,OAAO,qCAAqCU,UAAU,EAAE;IAElF,OAAO,IAAI,CAACF,WAAW,CAACF,SAAS,CAAC;EACpC;EAEAK,sBAAsB,CAACR,OAAe,EAChBC,WAAmB,EACnBM,UAAkB;IAEtC;IACA,MAAMJ,SAAS,GAAG,GAAG,IAAI,CAACN,OAAO,qCAAqCU,UAAU,EAAE,GAChE,SAASP,OAAO,SAASC,WAAW,EAAE;IAExD,OAAO,IAAI,CAACR,UAAU,CAACK,GAAG,CAAsBK,SAAS,CAAC;EAC5D;EAIQE,WAAW,CAACF,SAAiB;IACnC,OAAO,IAAI,CAACV,UAAU,CAACK,GAAG,CAAsBK,SAAS,CAAC,CAACM,IAAI,CAACnB,GAAG,CAACoB,QAAQ,IAAIA,QAAQ,CAACC,SAAS,CAACC,QAAQ,CAAC,CAAC;EAC/G;EAEAC,oBAAoB;IAElB,OAAO,IAAI,CAACpB,UAAU,CAACK,GAAG,CAA6B,IAAI,CAACgB,WAAW,CAAC,CAACL,IAAI,CAC3EnB,GAAG,CAACoB,QAAQ,IAAIA,QAAQ,CAACC,SAAS,CAACI,eAAe,CAAC,CACpD;EACH;;AAlEWxB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAyB,SAAdzB,cAAc;EAAA0B,YAFb;AAAM","names":["map","ProductService","constructor","httpClient","getProduct","theProductId","productUrl","baseUrl","get","getProductListPaginate","thePage","thePageSize","theCategoryId","searchUrl","getProductList","getProducts","searchProducts","theKeyword","searchProductsPaginate","pipe","response","_embedded","products","getProductCategories","categoryUrl","productCategory","factory","providedIn"],"sourceRoot":"","sources":["F:\\Spring Boot Java\\E-Commerce\\Front-End\\angular-ecommerce\\src\\app\\services\\product.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Product } from '../common/product';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ProductCategory } from '../common/product-category';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProductService {\r\n\r\n  private baseUrl = 'http://localhost:6060/api/products';\r\n\r\n  private categoryUrl = 'http://localhost:6060/api/product-category';\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  getProduct(theProductId: number): Observable<Product> {\r\n\r\n    // need to build URL based on product id\r\n    const productUrl = `${this.baseUrl}/${theProductId}`;\r\n\r\n    return this.httpClient.get<Product>(productUrl);\r\n  }\r\n\r\n  getProductListPaginate(thePage: number, \r\n                         thePageSize: number, \r\n                         theCategoryId: number): Observable<GetResponseProducts> {\r\n\r\n    // need to build URL based on category id, page and size \r\n    const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}`\r\n                    + `&page=${thePage}&size=${thePageSize}`;\r\n\r\n    return this.httpClient.get<GetResponseProducts>(searchUrl);\r\n  }\r\n\r\n\r\n  getProductList(theCategoryId: number): Observable<Product[]> {\r\n\r\n    // need to build URL based on category id \r\n    const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}`;\r\n\r\n    return this.getProducts(searchUrl);\r\n  }\r\n\r\n  searchProducts(theKeyword: string): Observable<Product[]> {\r\n\r\n    // need to build URL based on the keyword \r\n    const searchUrl = `${this.baseUrl}/search/findByNameContaining?name=${theKeyword}`;\r\n\r\n    return this.getProducts(searchUrl);\r\n  }\r\n\r\n  searchProductsPaginate(thePage: number, \r\n                        thePageSize: number, \r\n                        theKeyword: string): Observable<GetResponseProducts> {\r\n\r\n    // need to build URL based on keyword, page and size \r\n    const searchUrl = `${this.baseUrl}/search/findByNameContaining?name=${theKeyword}`\r\n                    + `&page=${thePage}&size=${thePageSize}`;\r\n    \r\n    return this.httpClient.get<GetResponseProducts>(searchUrl);\r\n  }\r\n\r\n\r\n\r\n  private getProducts(searchUrl: string): Observable<Product[]> {\r\n    return this.httpClient.get<GetResponseProducts>(searchUrl).pipe(map(response => response._embedded.products));\r\n  }\r\n\r\n  getProductCategories(): Observable<ProductCategory[]> {\r\n\r\n    return this.httpClient.get<GetResponseProductCategory>(this.categoryUrl).pipe(\r\n      map(response => response._embedded.productCategory)\r\n    );\r\n  }\r\n\r\n}\r\n\r\ninterface GetResponseProducts {\r\n  _embedded: {\r\n    products: Product[];\r\n  },\r\n  page: {\r\n    size: number,\r\n    totalElements: number,\r\n    totalPages: number,\r\n    number: number\r\n  }\r\n}\r\n\r\ninterface GetResponseProductCategory {\r\n  _embedded: {\r\n    productCategory: ProductCategory[];\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}