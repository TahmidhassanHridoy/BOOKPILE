{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.baseUrl = 'http://localhost:6060/api/products';\n    this.categoryUrl = 'http://localhost:6060/api/product-category';\n  }\n  getProduct(theProductId) {\n    const productUrl = `${this.baseUrl}/${theProductId}`;\n    return this.httpClient.get(productUrl);\n  }\n  getProductList(theCategoryId) {\n    // need to build URL based on category id \n    const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}`;\n    return this.getProducts(searchUrl);\n  }\n  searchProducts(theKeyword) {\n    // need to build URL based on category id \n    const searchUrl = `${this.baseUrl}/search/findByNameContaining?name=${theKeyword}`;\n    return this.getProducts(searchUrl);\n  }\n  getProducts(searchUrl) {\n    return this.httpClient.get(searchUrl).pipe(map(response => response._embedded.products));\n  }\n  getProductCategories() {\n    return this.httpClient.get(this.categoryUrl).pipe(map(response => response._embedded.productCategory));\n  }\n}\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n};\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAASA,GAAG,QAAQ,gBAAgB;;;AAMpC,OAAM,MAAOC,cAAc;EAOzBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAJtB,YAAO,GAAG,oCAAoC;IAE9C,gBAAW,GAAG,4CAA4C;EAEpB;EAE9CC,UAAU,CAACC,YAAoB;IAE7B,MAAMC,UAAU,GAAG,GAAG,IAAI,CAACC,OAAO,IAAIF,YAAY,EAAE;IAEpD,OAAO,IAAI,CAACF,UAAU,CAACK,GAAG,CAAUF,UAAU,CAAC;EAEjD;EAEAG,cAAc,CAACC,aAAqB;IAElC;IACA,MAAMC,SAAS,GAAG,GAAG,IAAI,CAACJ,OAAO,+BAA+BG,aAAa,EAAE;IAE/E,OAAO,IAAI,CAACE,WAAW,CAACD,SAAS,CAAC;EAEpC;EAEAE,cAAc,CAACC,UAAkB;IACjC;IACA,MAAMH,SAAS,GAAG,GAAG,IAAI,CAACJ,OAAO,qCAAqCO,UAAU,EAAE;IAElF,OAAO,IAAI,CAACF,WAAW,CAACD,SAAS,CAAC;EACpC;EAEUC,WAAW,CAACD,SAAiB;IACnC,OAAO,IAAI,CAACR,UAAU,CAACK,GAAG,CAAsBG,SAAS,CAAC,CAACI,IAAI,CAC7Df,GAAG,CAACgB,QAAQ,IAAIA,QAAQ,CAACC,SAAS,CAACC,QAAQ,CAAC,CAC7C;EACH;EAEAC,oBAAoB;IAElB,OAAO,IAAI,CAAChB,UAAU,CAACK,GAAG,CAA6B,IAAI,CAACY,WAAW,CAAC,CAACL,IAAI,CAC3Ef,GAAG,CAACgB,QAAQ,IAAIA,QAAQ,CAACC,SAAS,CAACI,eAAe,CAAC,CACpD;EAEH;;AA7CWpB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAqB,SAAdrB,cAAc;EAAAsB,YAFb;AAAM","names":["map","ProductService","constructor","httpClient","getProduct","theProductId","productUrl","baseUrl","get","getProductList","theCategoryId","searchUrl","getProducts","searchProducts","theKeyword","pipe","response","_embedded","products","getProductCategories","categoryUrl","productCategory","factory","providedIn"],"sourceRoot":"","sources":["E:\\Tahmid Intern I-240\\E-commerce Project\\Front-End\\angular-ecommerce\\src\\app\\services\\product.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Product } from '../common/product';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ProductCategory } from '../common/product-category';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n\n\n  private baseUrl = 'http://localhost:6060/api/products';\n\n  private categoryUrl = 'http://localhost:6060/api/product-category';\n\n  constructor(private httpClient: HttpClient) { }\n\n  getProduct(theProductId: number): Observable<Product> {\n\n    const productUrl = `${this.baseUrl}/${theProductId}`;\n    \n    return this.httpClient.get<Product>(productUrl);\n\n  }\n\n  getProductList(theCategoryId: number): Observable<Product[]> {\n\n    // need to build URL based on category id \n    const searchUrl = `${this.baseUrl}/search/findByCategoryId?id=${theCategoryId}`;\n\n    return this.getProducts(searchUrl); \n\n  }\n\n  searchProducts(theKeyword: string): Observable<Product[]> {\n  // need to build URL based on category id \n  const searchUrl = `${this.baseUrl}/search/findByNameContaining?name=${theKeyword}`;\n\n  return this.getProducts(searchUrl);  \n}\n\n  private getProducts(searchUrl: string): Observable<Product[]> {\n    return this.httpClient.get<GetResponseProducts>(searchUrl).pipe(\n      map(response => response._embedded.products)\n    );\n  }\n\n  getProductCategories(): Observable<ProductCategory[]> {\n   \n    return this.httpClient.get<GetResponseProductCategory>(this.categoryUrl).pipe(\n      map(response => response._embedded.productCategory)\n    );\n\n  }\n\n}\n\ninterface GetResponseProducts {\n  _embedded: {\n    products: Product[];\n  }\n}\n\ninterface GetResponseProductCategory {\n  _embedded: {\n    productCategory: any;\n    products: ProductCategory[];\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}