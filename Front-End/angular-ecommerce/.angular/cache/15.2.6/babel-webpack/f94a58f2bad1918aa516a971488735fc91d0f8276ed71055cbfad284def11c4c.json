{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class CartService {\n  constructor() {\n    this.cartItems = [];\n    this.totalPrice = new Subject();\n    this.totalQuantity = new Subject();\n  }\n  addToCart(theCartItem) {\n    // check if we already have the item in our cart\n    let alreadyExistsInCart = false;\n    let existingCartItem = undefined;\n    if (this.cartItems.length > 0) {\n      // find the item in the cart based on item id\n      existingCartItem = this.cartItems.find(tempCartItem => tempCartItem.id === theCartItem.id);\n      // check if we found it\n      alreadyExistsInCart = existingCartItem != undefined;\n    }\n    if (alreadyExistsInCart) {\n      // increment the quantity\n      existingCartItem.quantity++;\n    } else {\n      // just add the item to the array\n      this.cartItems.push(theCartItem);\n    }\n    // compute cart total price and total quantity\n    this.computeCartTotals();\n  }\n  computeCartTotals() {\n    let totalPriceValue = 0;\n    let totalQuantityValue = 0;\n    for (let currentCartItem of this.cartItems) {\n      totalPriceValue += currentCartItem.quantity * currentCartItem.unitPrice;\n      totalQuantityValue += currentCartItem.quantity;\n    }\n    // publish the new values ... all subscribers will receive the new data\n    this.totalPrice.next(totalPriceValue);\n    this.totalQuantity.next(totalQuantityValue);\n    // log cart data just for debugging purposes\n    this.logCartData(totalPriceValue, totalQuantityValue);\n  }\n  logCartData(totalPriceValue, totalQuantityValue) {\n    console.log('Contents of the cart');\n    for (let tempCartItem of this.cartItems) {\n      const subTotalPrice = tempCartItem.quantity * tempCartItem.unitPrice;\n      console.log(`name: ${tempCartItem.name}, quantity=${tempCartItem.quantity}, unitPrice=${tempCartItem.unitPrice}, subTotalPrice=${subTotalPrice}`);\n    }\n    console.log(`totalPrice: ${totalPriceValue.toFixed(2)}, totalQuantity: ${totalQuantityValue}`);\n    console.log('----');\n  }\n  decrementQuantity(theCartItem) {\n    theCartItem.quantity--;\n    if (theCartItem.quantity === 0) {\n      this.remove(theCartItem);\n    } else {\n      this.computeCartTotals();\n    }\n  }\n  remove(theCartItem) {\n    // get index of item in the array\n    const itemIndex = this.cartItems.findIndex(tempCartItem => tempCartItem.id === theCartItem.id);\n    // if found, remove the item from the array at the given index\n    if (itemIndex > -1) {\n      this.cartItems.splice(itemIndex, 1);\n      this.computeCartTotals();\n    }\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)();\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,OAAO,QAAQ,MAAM;;AAK9B,OAAM,MAAOC,WAAW;EAOtBC;IALA,cAAS,GAAe,EAAE;IAE1B,eAAU,GAAoB,IAAIF,OAAO,EAAU;IACnD,kBAAa,GAAoB,IAAIA,OAAO,EAAU;EAEtC;EAEhBG,SAAS,CAACC,WAAqB;IAE7B;IACA,IAAIC,mBAAmB,GAAY,KAAK;IACxC,IAAIC,gBAAgB,GAAaC,SAAU;IAE3C,IAAI,IAAI,CAACC,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;MAC7B;MAEAH,gBAAgB,GAAG,IAAI,CAACE,SAAS,CAACE,IAAI,CAAEC,YAAY,IAAIA,YAAY,CAACC,EAAE,KAAKR,WAAW,CAACQ,EAAE,CAAG;MAE7F;MACAP,mBAAmB,GAAIC,gBAAgB,IAAIC,SAAU;;IAGvD,IAAIF,mBAAmB,EAAE;MACvB;MACAC,gBAAgB,CAACO,QAAQ,EAAE;KAC5B,MACI;MACH;MACA,IAAI,CAACL,SAAS,CAACM,IAAI,CAACV,WAAW,CAAC;;IAGlC;IACA,IAAI,CAACW,iBAAiB,EAAE;EAC1B;EAEAA,iBAAiB;IAEf,IAAIC,eAAe,GAAW,CAAC;IAC/B,IAAIC,kBAAkB,GAAW,CAAC;IAElC,KAAK,IAAIC,eAAe,IAAI,IAAI,CAACV,SAAS,EAAE;MAC1CQ,eAAe,IAAIE,eAAe,CAACL,QAAQ,GAAGK,eAAe,CAACC,SAAS;MACvEF,kBAAkB,IAAIC,eAAe,CAACL,QAAQ;;IAGhD;IACA,IAAI,CAACO,UAAU,CAACC,IAAI,CAACL,eAAe,CAAC;IACrC,IAAI,CAACM,aAAa,CAACD,IAAI,CAACJ,kBAAkB,CAAC;IAE3C;IACA,IAAI,CAACM,WAAW,CAACP,eAAe,EAAEC,kBAAkB,CAAC;EACvD;EAEAM,WAAW,CAACP,eAAuB,EAAEC,kBAA0B;IAE7DO,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnC,KAAK,IAAId,YAAY,IAAI,IAAI,CAACH,SAAS,EAAE;MACvC,MAAMkB,aAAa,GAAGf,YAAY,CAACE,QAAQ,GAAGF,YAAY,CAACQ,SAAS;MACpEK,OAAO,CAACC,GAAG,CAAC,SAASd,YAAY,CAACgB,IAAI,cAAchB,YAAY,CAACE,QAAQ,eAAeF,YAAY,CAACQ,SAAS,mBAAmBO,aAAa,EAAE,CAAC;;IAGnJF,OAAO,CAACC,GAAG,CAAC,eAAeT,eAAe,CAACY,OAAO,CAAC,CAAC,CAAC,oBAAoBX,kBAAkB,EAAE,CAAC;IAC9FO,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;EACrB;EAEAI,iBAAiB,CAACzB,WAAqB;IAErCA,WAAW,CAACS,QAAQ,EAAE;IAEtB,IAAIT,WAAW,CAACS,QAAQ,KAAK,CAAC,EAAE;MAC9B,IAAI,CAACiB,MAAM,CAAC1B,WAAW,CAAC;KACzB,MACI;MACH,IAAI,CAACW,iBAAiB,EAAE;;EAE5B;EAEAe,MAAM,CAAC1B,WAAqB;IAE1B;IACA,MAAM2B,SAAS,GAAG,IAAI,CAACvB,SAAS,CAACwB,SAAS,CAAErB,YAAY,IAAIA,YAAY,CAACC,EAAE,KAAKR,WAAW,CAACQ,EAAE,CAAE;IAEhG;IACA,IAAImB,SAAS,GAAG,CAAC,CAAC,EAAE;MAClB,IAAI,CAACvB,SAAS,CAACyB,MAAM,CAACF,SAAS,EAAE,CAAC,CAAC;MAEnC,IAAI,CAAChB,iBAAiB,EAAE;;EAE5B;;AA1FWd,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAiC,SAAXjC,WAAW;EAAAkC,YAFV;AAAM","names":["Subject","CartService","constructor","addToCart","theCartItem","alreadyExistsInCart","existingCartItem","undefined","cartItems","length","find","tempCartItem","id","quantity","push","computeCartTotals","totalPriceValue","totalQuantityValue","currentCartItem","unitPrice","totalPrice","next","totalQuantity","logCartData","console","log","subTotalPrice","name","toFixed","decrementQuantity","remove","itemIndex","findIndex","splice","factory","providedIn"],"sourceRoot":"","sources":["F:\\Spring Boot Java\\E-Commerce\\Front-End\\angular-ecommerce\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CartItem } from '../common/cart-item';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CartService {\r\n\r\n  cartItems: CartItem[] = [];\r\n\r\n  totalPrice: Subject<number> = new Subject<number>();\r\n  totalQuantity: Subject<number> = new Subject<number>();\r\n\r\n  constructor() { }\r\n\r\n  addToCart(theCartItem: CartItem) {\r\n\r\n    // check if we already have the item in our cart\r\n    let alreadyExistsInCart: boolean = false;\r\n    let existingCartItem: CartItem = undefined!;\r\n\r\n    if (this.cartItems.length > 0) {\r\n      // find the item in the cart based on item id\r\n\r\n      existingCartItem = this.cartItems.find( tempCartItem => tempCartItem.id === theCartItem.id )!;\r\n\r\n      // check if we found it\r\n      alreadyExistsInCart = (existingCartItem != undefined);\r\n    }\r\n\r\n    if (alreadyExistsInCart) {\r\n      // increment the quantity\r\n      existingCartItem.quantity++;\r\n    }\r\n    else {\r\n      // just add the item to the array\r\n      this.cartItems.push(theCartItem);\r\n    }\r\n\r\n    // compute cart total price and total quantity\r\n    this.computeCartTotals();\r\n  }\r\n\r\n  computeCartTotals() {\r\n\r\n    let totalPriceValue: number = 0;\r\n    let totalQuantityValue: number = 0;\r\n\r\n    for (let currentCartItem of this.cartItems) {\r\n      totalPriceValue += currentCartItem.quantity * currentCartItem.unitPrice;\r\n      totalQuantityValue += currentCartItem.quantity;\r\n    }\r\n\r\n    // publish the new values ... all subscribers will receive the new data\r\n    this.totalPrice.next(totalPriceValue);\r\n    this.totalQuantity.next(totalQuantityValue);\r\n\r\n    // log cart data just for debugging purposes\r\n    this.logCartData(totalPriceValue, totalQuantityValue);\r\n  }\r\n\r\n  logCartData(totalPriceValue: number, totalQuantityValue: number) {\r\n\r\n    console.log('Contents of the cart');\r\n    for (let tempCartItem of this.cartItems) {\r\n      const subTotalPrice = tempCartItem.quantity * tempCartItem.unitPrice;\r\n      console.log(`name: ${tempCartItem.name}, quantity=${tempCartItem.quantity}, unitPrice=${tempCartItem.unitPrice}, subTotalPrice=${subTotalPrice}`);\r\n    }\r\n\r\n    console.log(`totalPrice: ${totalPriceValue.toFixed(2)}, totalQuantity: ${totalQuantityValue}`);\r\n    console.log('----');\r\n  }\r\n\r\n  decrementQuantity(theCartItem: CartItem) {\r\n\r\n    theCartItem.quantity--;\r\n\r\n    if (theCartItem.quantity === 0) {\r\n      this.remove(theCartItem);\r\n    }\r\n    else {\r\n      this.computeCartTotals();\r\n    }\r\n  }\r\n\r\n  remove(theCartItem: CartItem) {\r\n\r\n    // get index of item in the array\r\n    const itemIndex = this.cartItems.findIndex( tempCartItem => tempCartItem.id === theCartItem.id );\r\n\r\n    // if found, remove the item from the array at the given index\r\n    if (itemIndex > -1) {\r\n      this.cartItems.splice(itemIndex, 1);\r\n\r\n      this.computeCartTotals();\r\n    }\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}