{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  getListProduct() {\n    throw new Error('Method not implemented.');\n  }\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.baseUrl = 'http://localhost:6060/api/products';\n  }\n  getProductList() {\n    return this.httpClient.get(this.baseUrl).pipe(map(response => response._embedded.products));\n  }\n}\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n};\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,GAAG,QAAQ,MAAM;;;AAMtC,OAAM,MAAOC,cAAc;EACzBC,cAAc;IACZ,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAGAC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IADtB,YAAO,GAAG,oCAAoC;EACR;EAE9CC,cAAc;IACX,OAAO,IAAI,CAACD,UAAU,CAACE,GAAG,CAAc,IAAI,CAACC,OAAO,CAAC,CAACC,IAAI,CAACT,GAAG,CAACU,QAAQ,IAAIA,QAAQ,CAACC,SAAS,CAACC,QAAQ,CAAC,CACrG;EACH;;AAXSX,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAY,SAAdZ,cAAc;EAAAa,YAFb;AAAM","names":["map","ProductService","getListProduct","Error","constructor","httpClient","getProductList","get","baseUrl","pipe","response","_embedded","products","factory","providedIn"],"sourceRoot":"","sources":["E:\\Tahmid Intern I-240\\E-commerce Project\\Front-End\\angular-ecommerce\\src\\app\\services\\product.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, map } from 'rxjs';\nimport { Product } from '../common/product';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n  getListProduct() {\n    throw new Error('Method not implemented.');\n  }\n\n  private baseUrl = 'http://localhost:6060/api/products';\n  constructor(private httpClient: HttpClient) { }\n\n  getProductList(): Observable<Product[]> {\n     return this.httpClient.get<GetResponse>(this.baseUrl).pipe(map(response => response._embedded.products)\n      );\n    }\n}\n\ninterface GetResponse {\n  _embedded: {\n    products:Product[];\n  }\n}\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}